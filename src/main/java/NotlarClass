/*
1) static variable veya static methodlar (class member) tum object'ler icin ortak elemandir
2) static class member'lar uzerinde yapilan degisiklikler tum objectleri etkiler.
3) static class member'lar class'a, non-static class member'lar object'lere aittir
4) static class member'lara ulasmak icin object olusturmaya gerek duyulmaz,
   ama non-static class member'lara ulasmak icin object olusturmak sarttir
5) static variable'larin diger adi class variable'dir,
   non-static variable'larin diger adi instance variable veya object variable'dir
 */


   /*"static" blok, bir class'in yüklenmesi sırasında otomatik olarak çalışan ve class'in başlatılmasını
veya başlangıç ayarlarını yapmayı sağlayan bir özelliktir. Statik blok, yalnızca bir kez çalıştırılır.
 Bu bloklar örneğin, veritabanı bağlantıları için kullanılır.
 Bu, uygulamanın herhangi bir bölümünde veritabanına erişim gerektiğinde bağlantının hızlı
 bir şekilde hazır olmasını sağlar.
 */


 /* instance (örnek) blok, bir Class'in her Object'i (nesnesi) oluşturulduğunda çalışan bir kod bloğudur.

   Instance bloklarının temel özellikleri şunlardır:

 1- Her Örnek İçin Çalışır: Instance blok, bir class'in her örneği oluşturulduğunda çalışır.
 Yani, her yeni object için bu blok tekrar çalışır.

 2- Kod Tekrarını Önler: Instance blokları kullanarak, her Object'in başlatma işlemlerini veya belirli kod
 parçalarını tekrar tekrar yazmaktan kaçınırsınız.

    Gerçek hayattan bir örnek: Bir otomobil Class'i düşünün. Her otomobilin örneği (nesnesi-object'i)
    oluşturulduğunda, otomobilin rengini ve yakıt türünü belirlemek için instance bloklarını kullanabilirsiniz.

     Örneğin: instance blok, her otomobil Object'i oluşturulduğunda çalışır ve
     otomobilin rengini siyah ve yakıt türünü benzin olarak başlatır.
    Bu, her yeni otomobilin aynı başlangıç değerleriyle başlamasını sağlar.
     Diger ozellikler sonra ayarlanir ki tekrardan kurtuluruz*/


     /*Object Yönelimli Programlamanın Faydaları:
     1) Object oluşturma bir Class içerisinde toplanır ve tüm projelerde kullanılabilirliğe olanak sağlar.(String gibi)
     2) Class'larin 1 kez oluşturulması sayesinde uzun kodları tekrardan yazmak yerine kısa kodlamalar
     ile çalıştırılabilir. Substring() method'u 1 kere yazilmis ama surekli kullanabiliyoruz.
     3) Uzun kodların tekrar yazılmasının engellenmesi sayesinde geliştirme süreci kısalır.
     4) Object'ler birbirinden bağımsız olduğundan bilgi gizliliği konusunda avantaj sağlar.
     5) Class'lar sayesinde tüm projelerde değişiklik yapmak yerine tek bir class' ta değişiklik
     yapılıp tüm projelerde çalışması sağlanır. Bu zaman kaybını büyük ölçüde azaltır.*/



       /* OOP'leri 4 temel özellikte inceleyebiliriz.
     1. Inheritance - Miras Alma
     2. Polymorphism - Çok Biçimlilik
     3. Encapsulation - Kapsülleme
     4. Abstraction - Soyutlama
     */

     /*
     Inheritance'in Faydalari nelerdir?

     1) Kodun yeniden kullanılmasına yardımcı olur.
     2) Ana kodun tekrar yazılmasına gerek olmadığı için, daha az kod yazarak, zamandan ve
     emekten tasarruf sağlayabiliriz.
     3) Kolayca update yapabiliriz.
     4) Class'lari kuculturuz.
     5) Daha az geliştirme ve bakım maliyetine yol açar.
     */


     /*
     Soru: Peki child bir class'ta Object olusturuldugunda, Parent bunu nasil algiliyor da
     kendi constructor'unu calistiriyor?

     Cevap: Super() cagrisi ile yapilir. Super çağrısı, bir child class'ın constructor'unda,
     parent class'in parametresiz constructor'unu çağırmak için kullanılan bir ifadedir.

     super() çağrısı, bir child class'ta bir object oluşturulduğunda, otomatik olarak çağrılır.
     Ancak, super() çağrısını manuel olarak da çağırabilirsiniz.
     Bunu yapmak için, super() ifadesini, child class'ın constructor'unun başında kullanabilirsiniz.
     Manuel olarak yazarsaniz parametreli constructor'lari da cagirabilirsiniz.

     Neden super cagrisi yapalim?

     1- super keyword'unu kullanirsaniz, hem parent class'in methodunu çağırabilir hem de bu
     methodun davranışını child class'in ihtiyacına göre değiştirebilirsiniz.

     2 - extends ise sadece miras almayı sağlar, ancak parent class'in methodlarını değiştirmez.
     */


     /*Soru : Ayni class'taki constructor'lar arasinda gezinebilir miyim?
     Ornegin Car class'tan hem sedan hem de sport modellerini ayni anda alip diger ortak ozelliklerle birlikte
     uretime sokabilir miyim? Evet.

     Cevap : Ayni class'taki constructor'lar arasinda gezinmek icin super() silinir ve this() keyword'u kullanilir.
      this() default olarak parametresiz constructor'i secer.

     this() ve super() her zaman ilk satirda olmalidir.
     Bu yuzden bir constructor'da ikisi bir arada kullanilamazlar.*/



     /*Soru : super() keyword'u kullanilarak parent class'taki constructor'lar degil de,
      variable'lar ve methodlar secilebilir mi?  Evet.
     Cevap : child'da bir constructor icinde, super yazip parantez koymadan, nokta koyup
      parent'taki variable veya methodlara ulasabiliriz */

      //OOP'nin prensiplerinin 2.sidir. Polymorphism (cok bicimlilik) demektir.
      //Bir method'u, istedigimiz sonuclari alacak sekilde, farkli farkli sekilllerde calistirabilmek icin kullanilir.